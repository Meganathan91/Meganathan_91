package businesslogic;

import entity.Bed;
import entity.IP;
import entity.Patient;
import generateid.HMSUtility;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

public class INPatientBO {

    /* Allocate bed for in-patient, given patientId compare with patient map contain patientType "IP".
       Allocate bed for this patient. For that create InPatient object and set inpatient member with
       inpatient and bed member with bed given bedId. And update inpatient object in inpatient map,
       key(inpatientId) and value(inpatient object) pair. Here each and every inpatient have unique
       id generated by random.
    */

    public void allocateBedForIP(Long patientId, Long bedId, Map<Long, Patient> patientMap, Map<Long, Bed> bedDetails, Map<Long, IP> inPatientMap,
                                 String bedType, String roomName) {
        INPatientBO patientBO = new INPatientBO();

        try {
            checkException(patientId, bedId, bedDetails, inPatientMap, bedType, roomName);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        Boolean isBedAllocated = patientBO.allocateBedForPatient(patientId, inPatientMap, patientMap, bedDetails, bedId);

    }

    private void checkException(Long patientId, Long bedId, Map<Long, Bed> bedDetails, Map<Long, IP> inPatientMap,
                                String bedType, String roomName) throws Exception {
        if (patientId == null) {
            throw new Exception("patient is not available : ");
        }
        if (bedId == null || bedId > 8) {
            throw new Exception("BedId is not Available : ");
        }
        if (bedDetails.isEmpty()) {
            throw new Exception("BedDetails Is Empty : ");
        }
        if (inPatientMap.isEmpty()) {
            throw new Exception("inPatientMap Is Empty : ");
        }
        if (bedType == null) {
            throw new Exception("Bed Is Not Available : ");
        }
        if (roomName == null) {
            throw new Exception("Room Is Not Available : ");
        }
    }

    private Boolean allocateBedForPatient(Long patientId, Map<Long, IP> inPatientMap, Map<Long, Patient> patientMap, Map<Long, Bed> bedDetails, Long bedId) {

        IP inPatient = new IP();
        Patient patient = new Patient();

        inPatient.setIpIdentificationNumber(HMSUtility.getId(new ArrayList<>(inPatientMap.keySet())));
        inPatientMap.put(inPatient.getIpIdentificationNumber(), inPatient);

        System.out.println(" inpatient details " + inPatientMap);

        try {

            if (patientMap.containsKey(patientId)) {
                patient = patientMap.get(patientId);
            }
            if (patient == null || patient.getPatientType().equals("OP"))
                throw new Exception("Allocate bed for only IP ");
            inPatient.setPatient(patient);
            inPatient.setBed(bedDetails.get(bedId));

            return true;
        } catch (Exception e) {
            System.out.println(" Allocate bed " + e.getMessage());
        }
        return false;
    }
}