package businesslogic;

import entity.Bed;
import entity.InPatient;
import entity.Patient;
import generateid.GenerateIPIdentificationNumber;

import java.util.ArrayList;
import java.util.Map;

public class InPatientBO {

    /* Allocate bed for in-patient, given patientId compare with patient map contain patientType "IP".
       Allocate bed for this patient. For that create InPatient object and set inpatient member with
       inpatient and bed member with bed given bedId. And update inpatient object in inpatient map,
       key(inpatientId) and value(inpatient object) pair. Here each and every inpatient have unique
       id generated by random.
    */
    static private InPatientBO patientBO;
    static private InPatient inPatient;

    static {
        patientBO = new InPatientBO();
        inPatient = new InPatient();
    }


    public void allocateBedForInPatient(Long patientId, Map<Long, Patient> patientDetails, Long bedId,
                                             Map<Long, Bed> bedDetails, Map<Long, InPatient> inPatientMap, String bedType, String roomName) throws Exception {


        if (patientId == null) {
            throw new Exception("InValid Patient Id : ");
        }
        if (bedId == null || bedId.longValue() > 8) {
            throw new Exception("BedId is not Available : ");
        }
        if (patientDetails.isEmpty()) {
            throw new Exception("InPatient Details is Empty : ");
        }
        if (bedDetails.isEmpty()) {
            throw new Exception("BedDetails Is Empty : ");
        }
        if (inPatientMap.isEmpty()) {
            throw new Exception("inPatientMap Is Empty : ");
        }
        if (bedType == null) {
            throw new Exception("Bed Is Not Available : ");
        }
        if (roomName == null) {
            throw new Exception("Room Is Not Available : ");
        }

        Patient patient;
        if (patientDetails.containsKey(patientId)) {
            patient = patientDetails.get(patientId);
        } else {
            throw new Exception("Patient is not Available : ");
        }

        try {
            Boolean isBedAllocated = patientBO.allocateBedForPatient(patient, bedDetails, bedId);
            inPatientMap.put(inPatient.getIpIdentificationNumber(), inPatient);
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }

    private Boolean allocateBedForPatient(Patient patient, Map<Long, Bed> bedDetails, Long bedId) throws Exception {

        if (patient.getPatientType() == "OP")
            throw new Exception("won't allocate bed for out-patient : ");

        inPatient.setIpIdentificationNumber(GenerateIPIdentificationNumber.getIpIdentificationNumber(new ArrayList<>()));

        if (patient.getPatientType().equals("IP")) {
            inPatient.setPatient(patient);
            inPatient.setBed(bedDetails.get(bedId));
            return true;
        }
        return false;
    }

}

